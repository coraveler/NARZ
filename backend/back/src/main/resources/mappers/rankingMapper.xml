<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kdt_final.back.ranking.dao.RankingMapper">

    <!-- 랭킹 추가 -->
    <insert id="addRanking" parameterType="com.kdt_final.back.ranking.domain.RankingRequestDTO">
        INSERT INTO ranking (author, board, rating, views, likes)
        VALUES (#{author}, #{board}, #{rating}, #{views}, #{likes})
    </insert>

    <!-- 모든 랭킹 가져오기 -->
    <select id="getRankings" resultType="com.kdt_final.back.ranking.domain.RankingResponseDTO">
        SELECT postId AS id, userId AS author, title AS board, rating, 0 AS views, 0 AS likes
        FROM post
        ORDER BY rating DESC
    </select>

    <!-- 특정 랭킹 삭제 -->
    <delete id="deleteRanking" parameterType="int">
        DELETE FROM ranking WHERE id = #{id}
    </delete>

    <!-- 특정 랭킹 정보 가져오기 -->
    <select id="getRankingInfo" parameterType="int" resultType="com.kdt_final.back.ranking.domain.RankingResponseDTO">
        SELECT postId AS id, userId AS author, title AS board, rating, 0 AS views, 0 AS likes
        FROM post
        WHERE postId = #{id}
    </select>

    <!-- 랭킹 수정 -->
    <update id="updateRanking" parameterType="com.kdt_final.back.ranking.domain.RankingRequestDTO">
        UPDATE ranking
        SET author = #{author},
            board = #{board},
            rating = #{rating},
            views = #{views},
            likes = #{likes}
        WHERE id = #{id}
    </update>

    <!-- 인기 게시글 랭킹 가져오기 -->
    <select id="getPopularPostRankings" resultType="com.kdt_final.back.ranking.domain.RankingResponseDTO">
        SELECT postId AS id, userId AS author, title AS board, rating, 0 AS views, 0 AS likes
        FROM post
        ORDER BY likes DESC
        LIMIT 10
    </select>

    <!-- 유저 활동 랭킹 가져오기 -->
    <select id="getUserActivityRankings" resultType="com.kdt_final.back.ranking.domain.RankingResponseDTO">
        SELECT u.username AS author,  -- userId 대신 username을 사용합니다.
               COUNT(DISTINCT p.postId) AS postCount, 
               COALESCE(SUM(CASE WHEN c.commentId IS NOT NULL THEN 1 ELSE 0 END), 0) AS commentCount
        FROM user u
        LEFT JOIN post p ON u.userId = p.userId
        LEFT JOIN comment c ON p.postId = c.postId -- 게시물에 대한 댓글 조인
        GROUP BY u.userId
        ORDER BY postCount DESC, commentCount DESC
        LIMIT 10
    </select>

    <!-- 명예의 전당 가져오기 -->
    <select id="getHallOfFame" resultType="com.kdt_final.back.ranking.domain.RankingResponseDTO">
        SELECT u.username AS author  -- userId 대신 username을 사용합니다.
        FROM user u
        WHERE u.lastActiveDate >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
        ORDER BY u.activityScore DESC
        LIMIT 3
    </select>

</mapper>
