<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kdt_final.back.ranking.dao.RankingMapper">

    <!-- 랭킹 추가 (인기 게시글 랭킹) -->
    <insert id="addRanking" parameterType="com.kdt_final.back.ranking.domain.RankingRequestDTO">
        INSERT INTO weeklyranking (author, postId, board, likes, postCount, commentCount, rankingType, weekOf)
        VALUES (#{author}, #{postId}, #{board}, #{likes}, #{postCount}, #{commentCount}, #{rankType}, #{weekOf})
    </insert>

    <!-- 주간 랭킹 초기화 -->
    <delete id="clearWeeklyRanking">
        DELETE FROM weeklyranking;
    </delete>

    <!-- 유저 활동 랭킹 추가 -->
    <!-- <insert id="addRankingUserActivity" parameterType="com.kdt_final.back.ranking.domain.RankingRequestDTO">
        INSERT INTO weeklyranking (author, postCount, commentCount, rankingType, weekOf)
        VALUES (#{author}, #{postCount}, #{commentCount}, #{rankType}, #{weekOf})
    </insert> -->

    <!-- 모든 랭킹 가져오기 -->
    <select id="getRankings" resultType="com.kdt_final.back.ranking.domain.RankingResponseDTO">
        SELECT id, author, board, likes, postCount, commentCount, rankingType, weekOf
        FROM weeklyranking
        ORDER BY id
    </select>

    <!-- 특정 랭킹 삭제 -->
    <delete id="deleteRanking" parameterType="int">
        DELETE FROM weeklyranking WHERE id = #{id}
    </delete>

    <!-- 특정 랭킹 정보 가져오기 -->
    <select id="getRankingInfo" parameterType="int" resultType="com.kdt_final.back.ranking.domain.RankingResponseDTO">
        SELECT id, author, board, likes, postCount, commentCount, rankingType, weekOf
        FROM weeklyranking
        WHERE id = #{id}
    </select>

    <!-- 랭킹 수정 -->
    <update id="updateRanking" parameterType="com.kdt_final.back.ranking.domain.RankingRequestDTO">
        UPDATE weeklyranking
        SET author = #{author},
            board = #{board},
            likes = #{likes},
            postCount = #{postCount},
            commentCount = #{commentCount}
        WHERE id = #{id}
    </update>

    <!-- 인기 게시글 랭킹 가져오기 -->
    <select id="getPopularPostRankings" 
            parameterType="String"
            resultType="com.kdt_final.back.ranking.domain.RankingResponseDTO">
        SELECT wr.id AS id, wr.author, wr.board, wr.likes, wr.rankingType, wr.postId
        FROM weeklyranking wr
        WHERE wr.rankingType = 'popularPost' AND wr.weekOf = #{weekOf}
        ORDER BY wr.likes DESC
        LIMIT 10
    </select>

    <!-- 유저 활동 랭킹 가져오기 -->
    <select id="getUserActivityRankings" resultType="com.kdt_final.back.ranking.domain.RankingResponseDTO">
        SELECT wr.author, 
                MAX(wr.postCount) AS postCount, 
                MAX(wr.commentCount) AS commentCount, 
                wr.rankingType
        FROM weeklyranking wr
        WHERE wr.rankingType = 'userActivity' AND wr.weekOf = #{weekOf}
        GROUP BY wr.author
        ORDER BY postCount DESC, commentCount DESC
        LIMIT 10
    </select>

    <!-- 명예의 전당 가져오기 (유저 활동 랭킹 1,2,3위) -->
    <select id="getHallOfFame" resultType="com.kdt_final.back.ranking.domain.RankingResponseDTO">
        SELECT wr.author, wr.postCount, wr.commentCount
        FROM weeklyranking wr
        WHERE wr.rankingType = 'userActivity' AND wr.weekOf = #{weekOf}
        ORDER BY wr.postCount DESC, wr.commentCount DESC
        LIMIT 3
    </select>

<!--  -->


     <!-- 이번주 모든 게시물 좋아요 수 가져오기 -->
    <select id="addPostRanking" 
            parameterType = "String"
            resultType="com.kdt_final.back.ranking.domain.RankingRequestDTO">
       SELECT 
            p.postId AS postId,
            p.title AS board, 
            u.userNickname AS author,
            COUNT(pl.likeNo) AS likes
        FROM 
            post p
        JOIN 
            user u ON p.userId = u.userId
        LEFT JOIN 
            postLike pl ON p.postId = pl.postId
        WHERE
            pl.createdDate >= #{currentWeek} 
        GROUP BY 
            p.postId;
    </select>

     <!-- 이번주 사용자 댓글, 게시글 수 가져오기 -->
    <select id="addUserRanking"
        parameterType="String"
        resultType="com.kdt_final.back.ranking.domain.RankingRequestDTO">
        SELECT 
            u.userNickname AS author, 
            COALESCE(postCounts.postCount, 0) AS postCount, 
            COALESCE(commentCounts.commentCount, 0) AS commentCount
        FROM 
            user u
        LEFT JOIN (
            SELECT 
                p.userId, 
                COUNT(p.postId) AS postCount
            FROM 
                post p
            WHERE DATE(p.createdDate) >= #{currentWeek}
            GROUP BY 
                p.userId
        ) postCounts ON u.userId = postCounts.userId
        LEFT JOIN (
            SELECT 
                c.userId, 
                COUNT(c.commentId) AS commentCount
            FROM 
                comment c
            WHERE DATE(c.createdDate) >= #{currentWeek}
            GROUP BY 
                c.userId
        ) commentCounts ON u.userId = commentCounts.userId
        ORDER BY 
            postCount DESC, 
            commentCount DESC;
    </select>

    
    <!-- 랭커 유저 저장 -->
    <insert id="saveRankUser" 
            parameterType="com.kdt_final.back.ranking.domain.RankingRequestDTO">
        INSERT INTO getrankuser (author, ranking, rankingType, weekOf)
        VALUES (#{author}, #{ranking}, #{rankType}, #{weekOf})
    </insert>

    <!-- 유저랭킹 누적 카운트 -->
    <select id="getRankCount"
            resultType="com.kdt_final.back.ranking.domain.totalranker.TotalRankerResponseDTO">
        SELECT 
            author,
            COUNT(CASE WHEN ranking = 1 THEN 1 END) AS firstCount,
            COUNT(CASE WHEN ranking = 2 THEN 1 END) AS secondCount,
            COUNT(CASE WHEN ranking = 3 THEN 1 END) AS thirdCount
        FROM 
            getrankuser
        WHERE  
            rankingType = "userActivity"
        GROUP BY 
            author;

    </select>

    <!-- author 로 userInfo 가져오기 -->
    <select id="getUserInfo"
            parameterType="String"
            resultType="com.kdt_final.back.ranking.domain.userinfo.UserInfoResponseDTO">
        SELECT userId, profileImage
        FROM user
        WHERE userNickname = #{author}
    </select>

    <select id="checkhallOfFame"
            resultType="int">
        SELECT u.userId
        FROM user u
        JOIN (
            SELECT author
            FROM getrankuser
            WHERE rankingType = 'popularPost'  <!-- 랭킹 유형 -->
            GROUP BY author
            ORDER BY COUNT(*) ASC  <!-- 가장 많이 랭킹된 author -->
            LIMIT 1
        ) AS mostPopularAuthor ON u.userNickname = mostPopularAuthor.author
    </select>
</mapper>
